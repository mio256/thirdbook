openapi: 3.0.3
info:
  title: Third Warehouse Booking API
  description: API for managing bookings at the Third Warehouse live venue.
  version: 1.0.0
servers:
  - url: https://api.thirdwarehouse.com/v1
    description: Main production server

paths:
  /ping:
    get:
      summary: Ping the server
      description: Check if the server is running.
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Response message
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bookings:
    get:
      summary: List all bookings
      description: Retrieve a list of all bookings that meets the conditions.
      parameters:
        - name: status
          in: query
          description: Filter bookings by status
          schema:
            $ref: '#/components/schemas/BookingStatus'
          required: false
        - name: user
          in: query
          description: Filter bookings by user ID
          schema:
              type: integer
              format: int64
          required: false
        - name: start
          in: query
          description: Filter bookings by date
          schema:
            type: string
            format: date-time
          required: false
        - name: end
          in: query
          description: Filter bookings by date
          schema:
              type: string
              format: date-time
          required: false
      responses:
        '200':
          description: A list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BearerAuth: [ ]
    post:
      summary: Create a new booking
      description: Create a new booking for a live event.
      requestBody:
        description: Booking details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBooking'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BearerAuth: [ ]

  /bookings/{bookingID}:
    get:
      summary: Get a specific booking
      description: Retrieve details of a specific booking by ID.
      parameters:
        - name: bookingID
          in: path
          required: true
          description: ID of the booking to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BearerAuth: [ ]
    put:
      summary: Cancel a booking
      description: Cancel an existing booking.
      parameters:
        - name: bookingID
          in: path
          required: true
          description: ID of the booking to cancel
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    post:
      summary: Register a new user
      description: Register a new user with the system.
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/login:
    post:
      summary: Login a user
      description: Authenticate a user and generate a token.
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Invalid credentials
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userID}:
    get:
      summary: Get user details
      description: Retrieve details of a specific user by ID.
      parameters:
        - name: userID
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BearerAuth: [ ]
    delete:
      summary: Delete a user
      description: Delete an existing user.
      parameters:
        - name: userID
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BearerAuth: [ ]

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Booking:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the booking
        name:
          type: string
          description: Name of the event
        start:
          type: string
          format: date-time
          description: Start date-time of the event
        end:
          type: string
          format: date-time
          description: End date-time of the event
        user:
          type: integer
          format: int64
          description: User who made the booking
        status:
          $ref: '#/components/schemas/BookingStatus'
        created_at:
          type: string
          format: date-time
          description: Date and time when the booking was created
        updated_at:
          type: string
          format: date-time
          description: Date and time when the booking was last updated

    NewBooking:
      type: object
      properties:
        name:
          type: string
          description: Name of the event
        start:
          type: string
          format: date-time
          description: Start date-time of the event
        end:
          type: string
          format: date-time
          description: End date-time of the event
        user:
          type: integer
          format: int64
          description: User making the booking

    BookingStatus:
      type: object
      properties:
        status:
          type: string
          description: New status for the booking
      enum:
        - pending
        - approved
        - cancelled
        - rejected

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user (hashed)
        created_at:
          type: string
          format: date-time
          description: Date and time when the user was created
        updated_at:
          type: string
          format: date-time
          description: Date and time when the user was last updated

    NewUser:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user

    LoginUser:
      type: object
      properties:
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user

    Error:
      description: Represents error object
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
      required:
        - code
        - message

    AuthToken:
      type: object
      properties:
        token:
          type: string
          description: Authentication token
