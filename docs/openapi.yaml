openapi: 3.0.3
info:
  title: Third Warehouse Booking API
  description: API for managing bookings at the Third Warehouse live venue.
  version: 1.0.0
servers:
  - url: https://api.thirdwarehouse.com/v1
    description: Main production server

paths:
  /bookings:
    get:
      summary: List all bookings
      description: Retrieve a list of all bookings.
      responses:
        '200':
          description: A list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new booking
      description: Create a new booking for a live event.
      requestBody:
        description: Booking details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBooking'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /bookings/{bookingId}:
    get:
      summary: Get a specific booking
      description: Retrieve details of a specific booking by ID.
      parameters:
        - name: bookingId
          in: path
          required: true
          description: ID of the booking to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a booking
      description: Update details of an existing booking.
      parameters:
        - name: bookingId
          in: path
          required: true
          description: ID of the booking to update
          schema:
            type: string
      requestBody:
        description: Updated booking details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBooking'
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Cancel a booking
      description: Cancel an existing booking.
      parameters:
        - name: bookingId
          in: path
          required: true
          description: ID of the booking to cancel
          schema:
            type: string
      responses:
        '204':
          description: Booking cancelled successfully
        '404':
          description: Booking not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    post:
      summary: Register a new user
      description: Register a new user with the system.
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/login:
    post:
      summary: Login a user
      description: Authenticate a user and generate a token.
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Invalid credentials
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userId}:
    get:
      summary: Get user details
      description: Retrieve details of a specific user by ID.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update user details
      description: Update details of an existing user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        description: Updated user details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BearerAuth: []
    delete:
      summary: Delete a user
      description: Delete an existing user.
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Booking:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the booking
        event:
          type: string
          description: Name of the event
        date:
          type: string
          format: date-time
          description: Date and time of the event
        user:
          type: string
          description: User who made the booking
        status:
          type: string
          description: Current status of the booking

    NewBooking:
      type: object
      properties:
        event:
          type: string
          description: Name of the event
        date:
          type: string
          format: date-time
          description: Date and time of the event
        user:
          type: string
          description: User making the booking

    UpdateBooking:
      type: object
      properties:
        event:
          type: string
          description: Name of the event
        date:
          type: string
          format: date-time
          description: Date and time of the event
        status:
          type: string
          description: Current status of the booking

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user (hashed)
        created_at:
          type: string
          format: date-time
          description: Date and time when the user was created
        updated_at:
          type: string
          format: date-time
          description: Date and time when the user was last updated

    NewUser:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user

    LoginUser:
      type: object
      properties:
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user

    UpdateUser:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Password of the user

    Error:
      description: Represents error object
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
      required:
        - code
        - message

    AuthToken:
      type: object
      properties:
        token:
          type: string
          description: Authentication token
