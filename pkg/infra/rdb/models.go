// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package rdb

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BookingType string

const (
	BookingTypePending  BookingType = "pending"
	BookingTypeApproved BookingType = "approved"
	BookingTypeCanceled BookingType = "canceled"
	BookingTypeRejected BookingType = "rejected"
)

func (e *BookingType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingType(s)
	case string:
		*e = BookingType(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingType: %T", src)
	}
	return nil
}

type NullBookingType struct {
	BookingType BookingType `json:"booking_type"`
	Valid       bool        `json:"valid"` // Valid is true if BookingType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingType) Scan(value interface{}) error {
	if value == nil {
		ns.BookingType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingType), nil
}

type Booking struct {
	ID        int64            `json:"id"`
	Name      string           `json:"name"`
	Date      pgtype.Timestamp `json:"date"`
	UserID    int64            `json:"user_id"`
	Status    BookingType      `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	ID        int64            `json:"id"`
	Name      string           `json:"name"`
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}
