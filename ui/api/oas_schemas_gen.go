// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AuthToken
type AuthToken struct {
	// Authentication token.
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *AuthToken) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AuthToken) SetToken(val OptString) {
	s.Token = val
}

func (*AuthToken) usersLoginPostRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/Booking
type Booking struct {
	// Unique identifier for the booking.
	ID OptString `json:"id"`
	// Name of the event.
	Event OptString `json:"event"`
	// Date and time of the event.
	Date OptDateTime `json:"date"`
	// User who made the booking.
	User OptString `json:"user"`
	// Current status of the booking.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *Booking) GetID() OptString {
	return s.ID
}

// GetEvent returns the value of Event.
func (s *Booking) GetEvent() OptString {
	return s.Event
}

// GetDate returns the value of Date.
func (s *Booking) GetDate() OptDateTime {
	return s.Date
}

// GetUser returns the value of User.
func (s *Booking) GetUser() OptString {
	return s.User
}

// GetStatus returns the value of Status.
func (s *Booking) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *Booking) SetID(val OptString) {
	s.ID = val
}

// SetEvent sets the value of Event.
func (s *Booking) SetEvent(val OptString) {
	s.Event = val
}

// SetDate sets the value of Date.
func (s *Booking) SetDate(val OptDateTime) {
	s.Date = val
}

// SetUser sets the value of User.
func (s *Booking) SetUser(val OptString) {
	s.User = val
}

// SetStatus sets the value of Status.
func (s *Booking) SetStatus(val OptString) {
	s.Status = val
}

func (*Booking) bookingsBookingIdGetRes() {}
func (*Booking) bookingsBookingIdPutRes() {}

// BookingsBookingIdDeleteNoContent is response for BookingsBookingIdDelete operation.
type BookingsBookingIdDeleteNoContent struct{}

func (*BookingsBookingIdDeleteNoContent) bookingsBookingIdDeleteRes() {}

// BookingsBookingIdDeleteNotFound is response for BookingsBookingIdDelete operation.
type BookingsBookingIdDeleteNotFound struct{}

func (*BookingsBookingIdDeleteNotFound) bookingsBookingIdDeleteRes() {}

// BookingsBookingIdGetNotFound is response for BookingsBookingIdGet operation.
type BookingsBookingIdGetNotFound struct{}

func (*BookingsBookingIdGetNotFound) bookingsBookingIdGetRes() {}

// BookingsBookingIdPutNotFound is response for BookingsBookingIdPut operation.
type BookingsBookingIdPutNotFound struct{}

func (*BookingsBookingIdPutNotFound) bookingsBookingIdPutRes() {}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/LoginUser
type LoginUser struct {
	// Email address of the user.
	Email OptString `json:"email"`
	// Password of the user.
	Password OptString `json:"password"`
}

// GetEmail returns the value of Email.
func (s *LoginUser) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *LoginUser) GetPassword() OptString {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *LoginUser) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *LoginUser) SetPassword(val OptString) {
	s.Password = val
}

// Ref: #/components/schemas/NewBooking
type NewBooking struct {
	// Name of the event.
	Event OptString `json:"event"`
	// Date and time of the event.
	Date OptDateTime `json:"date"`
	// User making the booking.
	User OptString `json:"user"`
}

// GetEvent returns the value of Event.
func (s *NewBooking) GetEvent() OptString {
	return s.Event
}

// GetDate returns the value of Date.
func (s *NewBooking) GetDate() OptDateTime {
	return s.Date
}

// GetUser returns the value of User.
func (s *NewBooking) GetUser() OptString {
	return s.User
}

// SetEvent sets the value of Event.
func (s *NewBooking) SetEvent(val OptString) {
	s.Event = val
}

// SetDate sets the value of Date.
func (s *NewBooking) SetDate(val OptDateTime) {
	s.Date = val
}

// SetUser sets the value of User.
func (s *NewBooking) SetUser(val OptString) {
	s.User = val
}

// Ref: #/components/schemas/NewUser
type NewUser struct {
	// Full name of the user.
	Name OptString `json:"name"`
	// Email address of the user.
	Email OptString `json:"email"`
	// Password of the user.
	Password OptString `json:"password"`
}

// GetName returns the value of Name.
func (s *NewUser) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *NewUser) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *NewUser) GetPassword() OptString {
	return s.Password
}

// SetName sets the value of Name.
func (s *NewUser) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *NewUser) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *NewUser) SetPassword(val OptString) {
	s.Password = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/UpdateBooking
type UpdateBooking struct {
	// Name of the event.
	Event OptString `json:"event"`
	// Date and time of the event.
	Date OptDateTime `json:"date"`
	// Current status of the booking.
	Status OptString `json:"status"`
}

// GetEvent returns the value of Event.
func (s *UpdateBooking) GetEvent() OptString {
	return s.Event
}

// GetDate returns the value of Date.
func (s *UpdateBooking) GetDate() OptDateTime {
	return s.Date
}

// GetStatus returns the value of Status.
func (s *UpdateBooking) GetStatus() OptString {
	return s.Status
}

// SetEvent sets the value of Event.
func (s *UpdateBooking) SetEvent(val OptString) {
	s.Event = val
}

// SetDate sets the value of Date.
func (s *UpdateBooking) SetDate(val OptDateTime) {
	s.Date = val
}

// SetStatus sets the value of Status.
func (s *UpdateBooking) SetStatus(val OptString) {
	s.Status = val
}

// Ref: #/components/schemas/UpdateUser
type UpdateUser struct {
	// Full name of the user.
	Name OptString `json:"name"`
	// Email address of the user.
	Email OptString `json:"email"`
	// Password of the user.
	Password OptString `json:"password"`
}

// GetName returns the value of Name.
func (s *UpdateUser) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UpdateUser) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *UpdateUser) GetPassword() OptString {
	return s.Password
}

// SetName sets the value of Name.
func (s *UpdateUser) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UpdateUser) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *UpdateUser) SetPassword(val OptString) {
	s.Password = val
}

// Ref: #/components/schemas/User
type User struct {
	// Unique identifier for the user.
	ID OptString `json:"id"`
	// Full name of the user.
	Name OptString `json:"name"`
	// Email address of the user.
	Email OptString `json:"email"`
	// Password of the user (hashed).
	Password OptString `json:"password"`
	// Date and time when the user was created.
	CreatedAt OptDateTime `json:"created_at"`
	// Date and time when the user was last updated.
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *User) GetPassword() OptString {
	return s.Password
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *User) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *User) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *User) SetPassword(val OptString) {
	s.Password = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *User) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*User) usersUserIdGetRes() {}
func (*User) usersUserIdPutRes() {}

// UsersLoginPostUnauthorized is response for UsersLoginPost operation.
type UsersLoginPostUnauthorized struct{}

func (*UsersLoginPostUnauthorized) usersLoginPostRes() {}

// UsersUserIdDeleteNoContent is response for UsersUserIdDelete operation.
type UsersUserIdDeleteNoContent struct{}

func (*UsersUserIdDeleteNoContent) usersUserIdDeleteRes() {}

// UsersUserIdDeleteNotFound is response for UsersUserIdDelete operation.
type UsersUserIdDeleteNotFound struct{}

func (*UsersUserIdDeleteNotFound) usersUserIdDeleteRes() {}

// UsersUserIdGetNotFound is response for UsersUserIdGet operation.
type UsersUserIdGetNotFound struct{}

func (*UsersUserIdGetNotFound) usersUserIdGetRes() {}

// UsersUserIdPutNotFound is response for UsersUserIdPut operation.
type UsersUserIdPutNotFound struct{}

func (*UsersUserIdPutNotFound) usersUserIdPutRes() {}
