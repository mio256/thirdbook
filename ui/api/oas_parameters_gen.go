// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// BookingsBookingIDGetParams is parameters of GET /bookings/{bookingID} operation.
type BookingsBookingIDGetParams struct {
	// ID of the booking to retrieve.
	BookingID int64
}

func unpackBookingsBookingIDGetParams(packed middleware.Parameters) (params BookingsBookingIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingID",
			In:   "path",
		}
		params.BookingID = packed[key].(int64)
	}
	return params
}

func decodeBookingsBookingIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params BookingsBookingIDGetParams, _ error) {
	// Decode path: bookingID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.BookingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// BookingsBookingIDPutParams is parameters of PUT /bookings/{bookingID} operation.
type BookingsBookingIDPutParams struct {
	// ID of the booking to cancel.
	BookingID int64
}

func unpackBookingsBookingIDPutParams(packed middleware.Parameters) (params BookingsBookingIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "bookingID",
			In:   "path",
		}
		params.BookingID = packed[key].(int64)
	}
	return params
}

func decodeBookingsBookingIDPutParams(args [1]string, argsEscaped bool, r *http.Request) (params BookingsBookingIDPutParams, _ error) {
	// Decode path: bookingID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bookingID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.BookingID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bookingID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// BookingsGetParams is parameters of GET /bookings operation.
type BookingsGetParams struct {
	// Filter bookings by status.
	Status OptBookingStatus
	// Filter bookings by user ID.
	User OptInt64
	// Filter bookings by date.
	Start OptDateTime
	// Filter bookings by date.
	End OptDateTime
}

func unpackBookingsGetParams(packed middleware.Parameters) (params BookingsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptBookingStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "user",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.User = v.(OptInt64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Start = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.End = v.(OptDateTime)
		}
	}
	return params
}

func decodeBookingsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params BookingsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "status", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal BookingStatus
				if err := func() error {
					return paramsDotStatusVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: user.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "user",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotUserVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.User.SetTo(paramsDotUserVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Start.SetTo(paramsDotStartVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.End.SetTo(paramsDotEndVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UsersUserIDDeleteParams is parameters of DELETE /users/{userID} operation.
type UsersUserIDDeleteParams struct {
	// ID of the user to delete.
	UserID int64
}

func unpackUsersUserIDDeleteParams(packed middleware.Parameters) (params UsersUserIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "userID",
			In:   "path",
		}
		params.UserID = packed[key].(int64)
	}
	return params
}

func decodeUsersUserIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params UsersUserIDDeleteParams, _ error) {
	// Decode path: userID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UsersUserIDGetParams is parameters of GET /users/{userID} operation.
type UsersUserIDGetParams struct {
	// ID of the user to retrieve.
	UserID int64
}

func unpackUsersUserIDGetParams(packed middleware.Parameters) (params UsersUserIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "userID",
			In:   "path",
		}
		params.UserID = packed[key].(int64)
	}
	return params
}

func decodeUsersUserIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params UsersUserIDGetParams, _ error) {
	// Decode path: userID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.UserID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
